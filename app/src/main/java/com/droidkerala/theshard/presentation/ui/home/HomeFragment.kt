package com.droidkerala.theshard.presentation.ui.home

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.GridCells
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyVerticalGrid
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.darkColors
import androidx.compose.material.lightColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.input.KeyboardType.Companion.Text
import androidx.compose.ui.unit.dp
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import com.droidkerala.theshard.data.Movie
import com.droidkerala.theshard.databinding.FragmentHomeBinding
import com.droidkerala.theshard.utils.Status
import com.google.accompanist.coil.rememberCoilPainter
import dagger.hilt.android.AndroidEntryPoint
import io.shrineapps.divinevibes.ui.theme.Red700
import io.shrineapps.divinevibes.ui.theme.Red800
import io.shrineapps.divinevibes.ui.theme.Red900
import javax.inject.Inject

@AndroidEntryPoint
class HomeFragment : Fragment() {


    private val lightColors = lightColors(
        primary = Red700,
        primaryVariant = Red900,
        onPrimary = Color.Black,
        secondary = Red700,
        secondaryVariant = Red900,
        onSecondary = Color.Black,
        error = Red800,
    )

    private val darkColors = darkColors(
        primary = Red700,
        primaryVariant = Red900,
        onPrimary = Color.White,
        secondary = Red700,
        secondaryVariant = Red900,
        onSecondary = Color.White,
        error = Red800
    )


    private var _binding: FragmentHomeBinding? = null

    private val homeViewModel: HomeViewModel by viewModels()

    private val binding get() = _binding!!

    @ExperimentalFoundationApi
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {


        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        val root: View = binding.root
        homeViewModel.getMovies("",1)

        binding.composeView.setContent {
            myTheme {
                MyComposeList(
                    Modifier
                        .fillMaxWidth()
                        .fillMaxHeight(),homeViewModel)
            }
        }

        return root
    }


    @Composable
    fun myTheme(
        darkTheme: Boolean = isSystemInDarkTheme(),
        content: @Composable () -> Unit
    ) {
        MaterialTheme(
            colors = if (darkTheme) darkColors else lightColors,
            /*...*/
            content = content
        )
    }


    @ExperimentalFoundationApi
    @Composable
    fun MyComposeList(
        modifier: Modifier = Modifier, viewModel: HomeViewModel
    ) {
        val items  by homeViewModel.liveDataMovies.observeAsState()
        // Use LazyRow when making horizontal lists
        items?.let { resource ->
            when (resource.status) {
                Status.SUCCESS -> {
                    val resultItem = resource.data?.results
                    Log.d("hai", resource.data.toString())
                    LazyVerticalGrid(cells = GridCells.Fixed(2), modifier = modifier) {
                        resultItem?.size?.let {
                            items(it) { data ->
                                MySimpleListItem(itemViewState = resultItem[data])
                            }
                        }
                    }
                }
                Status.ERROR -> {

                    // Toast.makeText(requireContext(), it.message, Toast.LENGTH_LONG).show()
                }
                Status.LOADING -> {

                }
            }
        }
    }
    // The UI for each list item can be generated by a reusable composable
    @Composable
    fun MySimpleListItem(itemViewState: Movie) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(300.dp)
        ) {
            Image(
                painter = rememberCoilPainter(
                    "https://image.tmdb.org/t/p/w185"+itemViewState.poster_path,
                    fadeIn = true
                ),
                contentDescription = "",modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
